{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport Immutable from 'immutable';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport config from \"../config\";\nimport rootReducer from \"../reducers\";\n\nfunction createMiddlewares({\n  isServer\n}) {\n  let middlewares = [thunkMiddleware];\n\n  if (config.env === 'development' && false) {\n    middlewares.push(createLogger({\n      level: 'info',\n      collapsed: true,\n      stateTransformer: state => {\n        let newState = {};\n\n        for (let i of _Object$keys(state)) {\n          if (Immutable.Iterable.isIterable(state[i])) {\n            newState[i] = state[i].toJS();\n          } else {\n            newState[i] = state[i];\n          }\n        }\n\n        return newState;\n      }\n    }));\n  }\n\n  return middlewares;\n}\n\nfunction immutableChildren(obj) {\n  let state = {};\n\n  _Object$keys(obj).forEach(key => {\n    state[key] = Immutable.fromJS(obj[key]);\n  });\n\n  return state;\n}\n\nexport default ((initialState = {}, context) => {\n  let {\n    isServer\n  } = context;\n  let middlewares = createMiddlewares({\n    isServer\n  });\n  let state = immutableChildren(initialState);\n  return createStore(rootReducer, state, composeWithDevTools(applyMiddleware(...middlewares)));\n});","map":{"version":3,"sources":["D:/jotter/src/store/createStore.js"],"names":["Immutable","thunkMiddleware","createLogger","composeWithDevTools","createStore","applyMiddleware","config","rootReducer","createMiddlewares","isServer","middlewares","env","push","level","collapsed","stateTransformer","state","newState","i","Iterable","isIterable","toJS","immutableChildren","obj","forEach","key","fromJS","initialState","context"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAEA,OAAOC,MAAP;AACA,OAAOC,WAAP;;AAEA,SAASC,iBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAA0C;AACxC,MAAIC,WAAW,GAAG,CAChBT,eADgB,CAAlB;;AAIA,MAAIK,MAAM,CAACK,GAAP,KAAe,aAAf,SAAJ,EAAmE;AACjED,IAAAA,WAAW,CAACE,IAAZ,CAAiBV,YAAY,CAAC;AAC5BW,MAAAA,KAAK,EAAE,MADqB;AAE5BC,MAAAA,SAAS,EAAE,IAFiB;AAG5BC,MAAAA,gBAAgB,EAAGC,KAAD,IAAW;AAC3B,YAAIC,QAAQ,GAAG,EAAf;;AAEA,aAAK,IAAIC,CAAT,IAAc,aAAYF,KAAZ,CAAd,EAAkC;AAChC,cAAIhB,SAAS,CAACmB,QAAV,CAAmBC,UAAnB,CAA8BJ,KAAK,CAACE,CAAD,CAAnC,CAAJ,EAA6C;AAC3CD,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,KAAK,CAACE,CAAD,CAAL,CAASG,IAAT,EAAd;AACD,WAFD,MAEO;AACLJ,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,KAAK,CAACE,CAAD,CAAnB;AACD;AACF;;AAED,eAAOD,QAAP;AACD;AAf2B,KAAD,CAA7B;AAiBD;;AAED,SAAOP,WAAP;AACD;;AAED,SAASY,iBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,MAAIP,KAAK,GAAG,EAAZ;;AACA,eAAYO,GAAZ,EAAiBC,OAAjB,CAA0BC,GAAD,IAAS;AAChCT,IAAAA,KAAK,CAACS,GAAD,CAAL,GAAazB,SAAS,CAAC0B,MAAV,CAAiBH,GAAG,CAACE,GAAD,CAApB,CAAb;AACD,GAFD;;AAGA,SAAOT,KAAP;AACD;;AAED,gBAAe,CAACW,YAAY,GAAG,EAAhB,EAAoBC,OAApB,KAAgC;AAC7C,MAAI;AAAEnB,IAAAA;AAAF,MAAemB,OAAnB;AACA,MAAIlB,WAAW,GAAGF,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAnC;AACA,MAAIO,KAAK,GAAGM,iBAAiB,CAACK,YAAD,CAA7B;AAEA,SAAOvB,WAAW,CAChBG,WADgB,EAEhBS,KAFgB,EAGhBb,mBAAmB,CAACE,eAAe,CAAC,GAAGK,WAAJ,CAAhB,CAHH,CAAlB;AAKD,CAVD","sourcesContent":["import Immutable from 'immutable'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { createStore, applyMiddleware } from 'redux'\r\n\r\nimport config from 'config'\r\nimport rootReducer from '../reducers'\r\n\r\nfunction createMiddlewares ({ isServer }) {\r\n  let middlewares = [\r\n    thunkMiddleware\r\n  ]\r\n\r\n  if (config.env === 'development' && typeof window !== 'undefined') {\r\n    middlewares.push(createLogger({\r\n      level: 'info',\r\n      collapsed: true,\r\n      stateTransformer: (state) => {\r\n        let newState = {}\r\n\r\n        for (let i of Object.keys(state)) {\r\n          if (Immutable.Iterable.isIterable(state[i])) {\r\n            newState[i] = state[i].toJS()\r\n          } else {\r\n            newState[i] = state[i]\r\n          }\r\n        }\r\n\r\n        return newState\r\n      }\r\n    }))\r\n  }\r\n\r\n  return middlewares\r\n}\r\n\r\nfunction immutableChildren (obj) {\r\n  let state = {}\r\n  Object.keys(obj).forEach((key) => {\r\n    state[key] = Immutable.fromJS(obj[key])\r\n  })\r\n  return state\r\n}\r\n\r\nexport default (initialState = {}, context) => {\r\n  let { isServer } = context\r\n  let middlewares = createMiddlewares({ isServer })\r\n  let state = immutableChildren(initialState)\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    state,\r\n    composeWithDevTools(applyMiddleware(...middlewares))\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}